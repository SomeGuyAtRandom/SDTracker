@model BusinessLayer.Models.AdminUser

@{
    ViewBag.Title = "EditProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container container-fluid">
    <form class="form-inline" role="form">
        <fieldset>

           

    @using (Html.BeginForm())
    {
        <div class="row well">
            <div>
                @Html.ActionLink("Delete User", "UserList", null, new { @class = "btn btn-sm btn-danger" })

                @Html.DisplayFor(model => Model, "DisableUser")
                


            </div>
        </div>
        <div class="row">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            <div class="page-header" style="padding:10px">

                <h1>
                    @Html.ValueFor(model => model.FirstName)
                    @Html.ValueFor(model => model.LastName)
                    @Html.HiddenFor(model => model.Id)
                </h1>
            </div>
        </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.FirstName)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FirstName)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.LastName)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LastName)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Initials)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Initials, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Initials)
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Email)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Email)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Phone)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Phone, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Phone)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="editor-label">
                                @Html.LabelFor(model => model.UserName)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.UserName)
                            </div>
                        </div>
                    </div>
                </div>

            <div class="row">&nbsp;</div>
                
                
                <div class="row well">
                    @Html.DisplayFor(model => model.Roles, "AllRoles")

                </div>

                }
            <div class="row">
                <div>
                    @Html.ActionLink("Back to List", "UserList", null, new { @class = "btn btn-sm btn-primary" })
                </div>
            </div>
</fieldset>
        </form>
</div>
<script>


    function changeEnableDisableUser(cboVal)
    {
        var htmlString = "";
        if (cboVal)
        {
            $(".enableDisablstatus").css("color", "red");
            htmlString = "This User Is Disabled";
        }
        else
        {
            $(".enableDisablstatus").css("color", "green");
            htmlString = "This User Is Enabled";

        }
        $(".enableDisablstatus").text(htmlString);
        
    }

    // EnableDisableUser
    $('#enableDisableUser').change(function () {
        var objID = $("[name='Id']").attr('value');
        var cboVal = $(this).prop('checked');

        $.ajax({
            type: 'POST',
            url: '@Url.Action("EnableDisableUser")',
            dataType: 'json',
            data: { 'objID': objID, 'isDisabled': cboVal },
            success: function (result) {
                if (result) {
                    // OK..
                    changeEnableDisableUser(cboVal);
                } else {
                    alert("Error in EnableDisableUser " + roleName + " to user Id " + objID);
                }
            }
        });

    });

    $('.rolesCheckBox').change(function () {
        var objID = $("[name='Id']").attr('value');
        var roleName = $(this).attr('id');
        var cboVal = $(this).prop('checked');

        $.ajax({
            type: 'POST',
            url: '@Url.Action("AddRemoveRole")',
            dataType: 'json',
            data: { 'objID': objID, 'roleName': roleName, 'isMember': cboVal },
            success: function (result) {
                if (result) {
                    // OK..
                } else {
                    alert("Error in updateing " + roleName + " to user Id " + objID);
                }
            }
        });

    });

    $('input').on('input propertychange paste', function () {
        var objID = $("[name='Id']").attr('value');
        var fieldName = $(this).attr('id');
        var txtValue = $(this).val();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveField")',
            dataType: 'json',
            data: { 'objID': objID, 'fieldName': fieldName, 'txtValue': txtValue },
            success: function (result) {
                if (result) {
                    // OK..
                } else {
                    alert("Error in updateing " + fieldName + " to " + txtValue);
                }
            }
        });
    });

    $("select").change(function () {
        alert();
    });



</script>
